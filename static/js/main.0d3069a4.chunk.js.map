{"version":3,"sources":["amir.jpg","components/about.js","components/home.js","components/sidebar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","About","className","data-section","Component","Home","id","treeData","key","label","nodes","url","Sidebar","data","App","class","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,kC,sPCMtBC,E,iLAEjB,OACE,6BACE,6BAASC,UAAU,iBAAiBC,eAAa,SACjD,kBAAC,IAAD,Y,GAL2BC,aCJdC,E,iLAEjB,OACE,6BACE,6BAASC,GAAG,gBAAgBJ,UAAU,gBAAgBC,eAAa,QAC/D,+D,GALsBC,a,iBCK5BG,G,MAAW,CACb,CACEC,IAAK,QACLC,MAAO,QACPC,MAAO,CACL,CACEF,IAAK,sBACLC,MAAO,6BACPE,IAAI,aACJD,MAAO,CACL,CACEF,IAAK,qBACLC,MAAO,0BACPC,MAAO,QAMjB,CACEF,IAAK,MACLC,MAAO,SAGQG,E,iLAEjB,OACE,6BACE,kBAAC,IAAD,CAAUC,KAAMN,IAEhB,6BAASL,UAAU,iBAAiBC,eAAa,e,GANpBC,aCOtBU,MA7Bf,WACE,OACE,yBAAKZ,UAAU,OACb,6BACE,iCACA,kBAAC,EAAD,MAEA,kDAIF,yBAAKa,MAAM,WACX,kBAAC,EAAD,OAGA,4BAAQb,UAAU,cAChB,yBAAKc,IAAKC,IAAMf,UAAU,WAAWgB,IAAI,SACzC,kBAAC,EAAD,MACA,yBAAKZ,GAAG,iBACR,yBAAKA,GAAG,iBACR,yBAAKA,GAAG,wBCjBIa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0d3069a4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/amir.e6153750.jpg\";","import React, { Component } from 'react'\nimport 'react-persian-calendar-date-picker/lib/DatePicker.css';\nimport DatePicker from 'react-persian-calendar-date-picker';\n// import { Button, Alert, Spinner } from 'elemental' \n\n\nexport default class About extends Component {\n  render() {\n    return (\n      <div>\n        <section className=\"colorlib-about\" data-section=\"about\">\n        <DatePicker />\n\n        </section>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n        <section id=\"colorlib-hero\" className=\"js-fullheight\" data-section=\"home\">\n            <h2>This is Amir a Super Hero</h2>\n        </section>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react'\nimport 'react-persian-calendar-date-picker/lib/DatePicker.css';\nimport DatePicker from 'react-persian-calendar-date-picker';\nimport TreeMenu from 'react-simple-tree-menu';\nimport '../../node_modules/react-simple-tree-menu/dist/main.css'\n\n\nconst treeData = [\n    {\n      key: 'About',\n      label: 'About',\n      nodes: [\n        {\n          key: 'second-level-node-1',\n          label: 'Node 1 at the second level',\n          url:\"google.com\",\n          nodes: [\n            {\n              key: 'third-level-node-1',\n              label: 'Last node of the branch',\n              nodes: [] // you can remove the nodes property or leave it as an empty array\n            },\n          ],\n        },\n      ],\n    },\n    {\n      key: 'Bio',\n      label: 'Bio',\n    },\n  ];\nexport default class Sidebar extends Component {\n  render() {\n    return (\n      <div>\n        <TreeMenu data={treeData} />\n        \n        <section className=\"colorlib-about\" data-section=\"about\">\n        </section>\n      </div>\n    )\n  }\n}","import React from 'react';\n// import logo from './logo.svg';\nimport logo from './amir.jpg';\nimport './App.css';\n\nimport About from './components/about'\nimport Home from './components/home'\nimport Sidebar from './components/sidebar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n        <section>\n        <About/>\n        \n        <ul>salame kore khar</ul>\n        </section>\n      \n      </div>\n      <div class=\"sidenav\">\n      <Sidebar/>\n      </div>\n      \n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Home/>\n        <div id=\"colorlib-main\">        \n        <div id=\"colorlib-page\">\n        <div id=\"container-wrap\">\n        </div>\n      \t</div>\n      </div>  \n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}